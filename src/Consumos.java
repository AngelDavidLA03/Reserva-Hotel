import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
*   VENTANA QUE SIRVE A MANERA VER, AÃ‘ADIR, Y MODIFICAR LOS DATOS DE LOS CONSUMOS HECHOS EN EL HOTEL
*   INTEGRANTES DEL EQUIPO
*   - Kevin Alan Flores Reyna - 20660053
*   - Angel David Lopez Alvarez - 20660062
*/

public class Consumos extends javax.swing.JFrame implements textFieldConfig {

    // Se referencia a la ventana de reservacion 
    private static Reservacion referencia;
    private static String cliente;
    
    public Consumos(String cliente, Reservacion referencia) {
        initComponents();
        
        // Se llama al metodo para bloquear los campos de texto
        lockTextEdit();
        
        this.referencia = referencia;
        this.cliente = cliente;
        
        
        btnCancel.setVisible(false);
        btnAccept.setVisible(false);
        
        ButtonConsprod.setVisible(false);
        
        txtCliente.setText(referencia.txtCliente.getText());
        
        Tablecons(referencia.txtCliente.getText());
    }

    Consumos(String dato){
        if(dato.substring(0, 2)=="CL")
        {
            txtCliente.setText(dato);
        }
        else
        {
            txtProducto.setText(dato);
        }
        
        String client = txtCliente.getText();
        
        // Se carga la tabla de productos
        Tablecons(client);
        
        
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion

            ps = cn.prepareStatement("CALL `SUMconsumos` (?)");
            ps.setString(1, client);
            rs = ps.executeQuery();                     // Se ejecuta la consulta
             // Se comprueba si el valor arrojado de la consulta es diferente a nulo
            if(rs != null)
            {
                // Ciclo while donde se comprueba si existe un registro siguiente
                while(rs.next())
                {
                    txtTotal.setText("$ " + rs.getDouble("Total") + "0");
                }
            }
        }
        catch(SQLException ex)
        {
            System.out.println("Error: " + ex);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tablecons = new javax.swing.JTable();
        txtTotal = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();
        txtCliente = new javax.swing.JTextField();
        txtcantiprod = new javax.swing.JTextField();
        ButtonConsprod = new javax.swing.JButton();
        txtpreciototal = new javax.swing.JFormattedTextField();
        ButtonBorrar = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        ButtonNuevo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Lista de Consumo");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        jLabel1.setText("Datos de Consumo");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tablecons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cliente", "Producto", "Cantidad", "Precio Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tablecons.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(Tablecons);
        if (Tablecons.getColumnModel().getColumnCount() > 0) {
            Tablecons.getColumnModel().getColumn(0).setResizable(false);
            Tablecons.getColumnModel().getColumn(1).setResizable(false);
            Tablecons.getColumnModel().getColumn(2).setResizable(false);
            Tablecons.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 400, 220));

        txtTotal.setText("Total: $");
        jPanel2.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, 160, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 420, 270));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Cantidad");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jLabel4.setText("Precio total");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jLabel6.setText("Producto");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel7.setText("Cliente");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));
        jPanel1.add(txtProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 100, -1));
        jPanel1.add(txtCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 100, -1));
        jPanel1.add(txtcantiprod, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 130, -1));

        ButtonConsprod.setText("Buscar");
        ButtonConsprod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConsprodActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonConsprod, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 70, -1));

        txtpreciototal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        jPanel1.add(txtpreciototal, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 80, -1));

        ButtonBorrar.setText("Borrar");
        ButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBorrarActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, -1, -1));

        btnAccept.setText("Aceptar");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        jPanel1.add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, -1, -1));

        ButtonNuevo.setText("Nuevo");
        ButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 210, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 310, 270));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonConsprodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConsprodActionPerformed
       // Codigos necesarios para mostrar la subventana de Lista de Productos
        Lista_Productos ven = new Lista_Productos(this);
        ven.setVisible(true);
    }//GEN-LAST:event_ButtonConsprodActionPerformed

    private void ButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBorrarActionPerformed
        // Se llama al metodo para vaciar los campos de texto
        clearTextField();

        // Se llama al metodo para bloquear los campos de texto
        lockTextEdit();
    }//GEN-LAST:event_ButtonBorrarActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Se llama al metodo para vaciar los campos de texto
        clearTextField();

        // Se llama al metodo para bloquear los campos de texto
        lockTextEdit();

        // Se ocultan los botones de aceptar y cancelar
        btnCancel.setVisible(false);
        btnAccept.setVisible(false);
        
        ButtonConsprod.setVisible(false);

        // Se muestran los demas botones de accion
        ButtonBorrar.setVisible(true);
        ButtonNuevo.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed

        // Se analiza si existe algun campo vacio en los campos de texto
        if(txtCliente.getText().equals("") || txtProducto.getText().equals("") || txtcantiprod.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Existe algun campo vacio, favor de llenarlo o cambiar el valor del desplegable", "CAMPOS VACIOS", JOptionPane.WARNING_MESSAGE);
        }
        // Sin embargo, si no existen campos vacios
        else
        {

            // Variables en las que se almacenaran lo almacenado en los espacios de la ventana

            // Se hace una concatenacion entre las iniciales y la fecha
            String client = txtCliente.getText();
            int product = Integer.parseInt(txtProducto.getText());
            int cant = Integer.parseInt(txtcantiprod.getText());

            // Se ejecuta el metodo para calcular el precio total
            calcPrice(client, product, cant);

            // Se llama al metodo para bloquear los campos de texto
            lockTextEdit();

            // Se ocultan los botones de aceptar y cancelar
            btnCancel.setVisible(false);
            btnAccept.setVisible(false);
            
            ButtonConsprod.setVisible(false);

            // Se muestran los demas botones de accion
            ButtonBorrar.setVisible(true);
            ButtonNuevo.setVisible(true);

        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void ButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNuevoActionPerformed
        // Se llama al metodo para vaciar los campos de texto
        clearTextField();

        // Se llama al metodo para desbloquear los campos de texto
        unlockTextEdit();

        // Se muestran los botones de aceptar y cancelar
        btnCancel.setVisible(true);
        btnAccept.setVisible(true);
        
        ButtonConsprod.setVisible(true);

        // Se ocultan los demas botones de accion
        ButtonBorrar.setVisible(false);
        ButtonNuevo.setVisible(false);
    }//GEN-LAST:event_ButtonNuevoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBorrar;
    private javax.swing.JButton ButtonConsprod;
    private javax.swing.JButton ButtonNuevo;
    private javax.swing.JTable Tablecons;
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCliente;
    public javax.swing.JTextField txtProducto;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtcantiprod;
    private javax.swing.JFormattedTextField txtpreciototal;
    // End of variables declaration//GEN-END:variables

    
    private void calcPrice(String codClient,int codProd, int cant)
    {
        double total = 0;
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta  
        
            try
            {
                Conexion cx = new Conexion();                           // Se crea una nueva conexion
                Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion

                double precioSubtotal = 0;
                
                ps = cn.prepareStatement("CALL `costprod`(?)");        //Se prepara la linea de codigo para ejecutar el PROCEDURE
                ps.setInt(1, codProd);                                  //Valor de entrada del Segundo dato


                rs = ps.executeQuery();                                 // Se ejecuta la consulta

                // Se comprueba si el valor arrojado de la consulta es diferente a nulo
                if(rs != null)
                {
                    // Ciclo while donde se comprueba si existe un registro siguiente
                    while(rs.next())
                    {
                 
                        precioSubtotal = rs.getDouble("precio");

                        total = precioSubtotal * cant; 

                        txtpreciototal.setText("$ " + total + "0");
                        
                        addconsumo(codClient,codProd,cant,total);
                    }

                }
                 cx.disconnect();    // Se cierra la conexion con la base de datos
            }
            catch (SQLException ex) 
            {
                System.out.println("Error = " + ex);     // Se notifica via consola que ha ocurrido un error
            }
    }
    
    
    private void addconsumo(String client, int product, int cant, double total)
    {
            PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta

            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");             // Se establece un nuevo formato para la fecha, de forma en que se presenten los ultimos 2 digitos del aÃ±o, el numero de mes y numero de dia
            String date = dateFormat.format(Calendar.getInstance().getTime());  // Se instancia un nuevo objeto para obtener la fecha actual del dispositivo

            DateFormat timeFormat = new SimpleDateFormat("hh:mm:ss");             // Se establece un nuevo formato para la fecha, de forma en que se presenten los ultimos 2 digitos del aÃ±o, el numero de mes y numero de dia
            String time = timeFormat.format(Calendar.getInstance().getTime());  // Se instancia un nuevo objeto para obtener la fecha actual del dispositivo

            
            
            try
            {
                Conexion cx = new Conexion();                                   // Se crea una nueva conexion
                Connection cn = cx.connect();                                   // Se ejecuta el metodo connect() de la clase Conexion

                ps = cn.prepareStatement("CALL `ADDcompra`(?,?,?,?,?,?)");     // Se prepara la linea de codigo para ejecutar el PROCEDURE

                // Se asignan los valores de los parametros a la consulta
                ps.setInt(1, product);
                ps.setString(2, client);
                ps.setInt(3, cant);
                ps.setString(4, date);
                ps.setString(5, time);
                ps.setDouble(6, total);
                
                ps.executeUpdate();         // Se ejecuta la actualizacion de los registros

                // Se notifica al usuario que se ha registrado el producto
                JOptionPane.showMessageDialog(null, "SE HA REGISTRADO LA NUEVA COMPRA");

                cx.disconnect();        // Se cierra la conexion con la base de datos
                String clien = txtCliente.getText();
                Tablecons(clien);    // Se actualiza la tabla 
            }


            catch(Exception e)
            {
                System.out.println("ERROR. - " + e);
            }
    }

// Metodo encargado para bloquear los campos de texto
    @Override
    public void lockTextEdit()
    {
        // Se bloquea la edicion de los campos de texto
        txtCliente.setEditable(false);
        txtProducto.setEditable(false);
        txtcantiprod.setEditable(false);
        txtpreciototal.setEditable(false);
    }
    
    // Metodo encargado para desbloquear los campos de texto
    @Override
    public void unlockTextEdit()
    {
        // Se desbloquea la edicion de los campos de texto
        txtProducto.setEditable(true);
        txtcantiprod.setEditable(true);
        txtpreciototal.setEditable(true);
    }
    
    // Metodo encargado para vaciar los campos de texto
    @Override
    public void clearTextField()
    {
        // Se vacian los campos de texto
        txtProducto.setText("");
        txtcantiprod.setText("");
        txtpreciototal.setText("");
    }

    private void Tablecons(String clien ) {
        DefaultTableModel modeloTabla = (DefaultTableModel) Tablecons.getModel();   // Se crea un nuevo modelo de tabla referenciando a la tabla de la ventana
        modeloTabla.setRowCount(0);                                                     // Se establece la primera fila para comenzar desde esa posicion
        
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        ResultSetMetaData rsmd;         // Variable que se encarga de almacenar la informacion de la tabla
        int columnas;                   // Cantidad de columnas que tiene la tabla
        
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion
            
            ps = cn.prepareStatement("CALL `SERCHcompra` (?)");         // Se prepara la linea de codigo para ejecutar el PROCEDURE
           
            // Se asignan los valores de los parametros a la consulta
            ps.setString(1, clien);
            
            rs = ps.executeQuery();                     // Se ejecuta la consulta
            rsmd = rs.getMetaData();                    // Se consigue la informacion de la 
            columnas = rsmd.getColumnCount();           // Se asigna la cantidad de columnas
            
            // Ciclo while donde se comprueba si existe un registro siguiente
            while(rs.next())
            {
                Object[] fila = new Object[columnas];           // Se establece un arreglo en el que se almacenaran los datos
                for(int i = 0; i < columnas; i++)               // Ciclo que termina hasta haber llenado el arreglo anterior
                {
                    fila[i] = rs.getObject(i + 1);              // Se aÃ±ade el valor de la consulta almacenado en el arreglo
                }
                modeloTabla.addRow(fila);                       // Se aÃ±ade la fila a la tabla
            }
            cx.disconnect();    // Se cierra la conexion con la base de datos
        }
        catch (SQLException ex) 
        {
            System.out.println("Error = " + ex);     // Se notifica via consola que ha ocurrido un error
        }    
    }
    
    
    

}
