
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author kalan
 */
public class Ganancias extends javax.swing.JFrame {

    /**
     * Creates new form Gananciaspormes
     */
    public Ganancias() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        año = new javax.swing.JComboBox<>();
        mes = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Ganancias = new javax.swing.JTable();
        Ganancias_total = new javax.swing.JTextField();
        Buscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        año.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Año", "2023", "2024", "2025", "2026", "2027", "2028", "2028", "2030" }));
        getContentPane().add(año, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        mes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mes", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        getContentPane().add(mes, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, -1, -1));

        Ganancias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cliente", "Fecha", "Ingreso"
            }
        ));
        jScrollPane1.setViewportView(Ganancias);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 460, -1));

        Ganancias_total.setText("Ganancia $");
        getContentPane().add(Ganancias_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 478, 140, -1));

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });
        getContentPane().add(Buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        
        int mes1 = 0;
        String datmes = mes.getSelectedItem().toString();
        int dataan = Integer.parseInt(año.getSelectedItem().toString());
        
        switch(datmes)
            {
                case "Enero":
                {
                    mes1 = 1;
                }
                case "Febrero":
                {
                    mes1 = 2;
                }
                case "Marzo":
                {
                    mes1 = 3;
                }
                case "Abril":
                {
                    mes1 = 4;
                } 
                case "Mayo":
                {
                    mes1 = 5;
                } 
                case "Junio":
                {
                    mes1 = 6;
                } 
                case "Julio":
                {
                    mes1 = 7;
                } 
                case "Agosto":
                {
                    mes1 = 8;
                } 
                case "Septiembre":
                {
                    mes1 = 9;
                } 
                case "Octubre":
                {
                    mes1 = 10;
                } 
                case "Noviembre":
                {
                    mes1 = 11;
                } 
                case "Diciembre":
                {
                    mes1 = 12;
                }   
            }
        
        Tablegan(mes1,dataan);
        
        ganancia(mes1,dataan); 
    }//GEN-LAST:event_BuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ganancias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ganancias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ganancias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ganancias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ganancias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar;
    private javax.swing.JTable Ganancias;
    private javax.swing.JTextField Ganancias_total;
    private javax.swing.JComboBox<String> año;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> mes;
    // End of variables declaration//GEN-END:variables

private void Tablegan(int mes, int an ) {
        DefaultTableModel modeloTabla = (DefaultTableModel) Ganancias.getModel();   // Se crea un nuevo modelo de tabla referenciando a la tabla de la ventana
        modeloTabla.setRowCount(0);                                                     // Se establece la primera fila para comenzar desde esa posicion
        
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        ResultSetMetaData rsmd;         // Variable que se encarga de almacenar la informacion de la tabla
        int columnas;                   // Cantidad de columnas que tiene la tabla
        
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion
            
            ps = cn.prepareStatement("CALL `Ingresostotpormes` (?,?)");         // Se prepara la linea de codigo para ejecutar el PROCEDURE
           
            // Se asignan los valores de los parametros a la consulta
            ps.setInt(1, mes);
            ps.setInt(2, an);
            
            rs = ps.executeQuery();                     // Se ejecuta la consulta
            rsmd = rs.getMetaData();                    // Se consigue la informacion de la 
            columnas = rsmd.getColumnCount();           // Se asigna la cantidad de columnas
            
            // Ciclo while donde se comprueba si existe un registro siguiente
            while(rs.next())
            {
                Object[] fila = new Object[columnas];           // Se establece un arreglo en el que se almacenaran los datos
                for(int i = 0; i < columnas; i++)               // Ciclo que termina hasta haber llenado el arreglo anterior
                {
                    fila[i] = rs.getObject(i + 1);              // Se añade el valor de la consulta almacenado en el arreglo
                }
                modeloTabla.addRow(fila);                       // Se añade la fila a la tabla
            }
            cx.disconnect();    // Se cierra la conexion con la base de datos
        }
        catch (SQLException ex) 
        {
            System.out.println("Error = " + ex);     // Se notifica via consola que ha ocurrido un error
        }    
    }

private void ganancia(int mes, int an ) {
   
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        ResultSetMetaData rsmd;         // Variable que se encarga de almacenar la informacion de la tabla
        double gan = 0;                 // Cantidad de columnas que tiene la tabla
        
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion
            
            ps = cn.prepareStatement("CALL `Ingresostotpormesmost` (?,?)");         // Se prepara la linea de codigo para ejecutar el PROCEDURE
           
            // Se asignan los valores de los parametros a la consulta
            ps.setInt(1, mes);
            ps.setInt(2, an);
            
            rs = ps.executeQuery();                     // Se ejecuta la consulta
            
            if(rs != null)
             {
                // Ciclo while donde se comprueba si existe un registro siguiente
                while(rs.next())
                {
                    gan = rs.getDouble("Total");          // Se asigna la cantidad de columnas
                }
             }
            Ganancias_total.setText("$ " + gan + "0");
            cx.disconnect();    // Se cierra la conexion con la base de datos
        }
        catch (SQLException ex) 
        {
            System.out.println("Error = " + ex);     // Se notifica via consola que ha ocurrido un error
        }    
    }

}
