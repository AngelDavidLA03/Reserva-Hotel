import java.sql.*;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
*   SUBVENTANA ENCARGADA DE VER Y AÑADIR LOS DATOS DE RESERVACION EN EL PROGRAMA
*   INTEGRANTES DEL EQUIPO
*   - Kevin Alan Flores Reyna - 20660053
*   - Angel David Lopez Alvarez - 20660062
*/
public class Reservacion extends javax.swing.JInternalFrame implements textFieldConfig {
    
    public String recID = Interfaz.recID;
    
    public Reservacion() 
    {
        
        initComponents();
        
        // Se llama al metodo para bloquear los campos de texto
        lockTextEdit();
        
        // Se ocultan los botones de aceptar y cancelar
        btnCancel.setVisible(false);
        btnAccept.setVisible(false);

        loadTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtHabitacion = new javax.swing.JTextField();
        txtCliente = new javax.swing.JTextField();
        txtcantdias = new javax.swing.JTextField();
        txtCosto = new javax.swing.JTextField();
        txtHora = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        ComboboxEstado = new javax.swing.JComboBox<>();
        ButtonConshabi = new javax.swing.JButton();
        ButtonConscli = new javax.swing.JButton();
        Comboboxtiporeserva = new javax.swing.JComboBox<>();
        txtFecha = new javax.swing.JFormattedTextField();
        ButtonBorrar = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        ButtonNuevo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JTextField();
        ButtonBuscar = new javax.swing.JButton();
        ButtonEliminar = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tableresev = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("Tipo");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jLabel5.setText("Fecha de Reserva");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jLabel6.setText("Cliente");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel7.setText("Habitación");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel8.setText("Hora de Reserva");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        jLabel9.setText("Cantidad de días");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        jLabel10.setText("Costo Total");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));
        jPanel1.add(txtHabitacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 100, -1));

        txtCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteActionPerformed(evt);
            }
        });
        jPanel1.add(txtCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 100, -1));
        jPanel1.add(txtcantdias, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 100, -1));
        jPanel1.add(txtCosto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 100, -1));

        txtHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        jPanel1.add(txtHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 100, -1));

        jLabel11.setText("Estado");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        ComboboxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "------", "Alquiler", "Pagado" }));
        jPanel1.add(ComboboxEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, -1, -1));

        ButtonConshabi.setText("Buscar");
        ButtonConshabi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConshabiActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonConshabi, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 70, -1));

        ButtonConscli.setText("Buscar");
        ButtonConscli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConscliActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonConscli, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 70, -1));

        Comboboxtiporeserva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-------", "Reserva", "Alquiler" }));
        jPanel1.add(Comboboxtiporeserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, -1, -1));

        txtFecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        jPanel1.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 100, -1));

        ButtonBorrar.setText("Borrar");
        ButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBorrarActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, -1, 20));

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 330, -1, 20));

        btnAccept.setText("Aceptar");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        jPanel1.add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 330, -1, 20));

        ButtonNuevo.setText("Nuevo");
        ButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 330, -1, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 310, 370));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 30, 280));

        txtBuscar.setText("Buscar");
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });
        jPanel2.add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, -1));

        ButtonBuscar.setText("Buscar");
        jPanel2.add(ButtonBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));

        ButtonEliminar.setText("Eliminar");
        jPanel2.add(ButtonEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        txtTotal.setText("Total: $");
        jPanel2.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 320, 160, 30));

        jButton6.setText("Consumo");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        jButton7.setText("Pagar");
        jPanel2.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, -1, -1));

        Tableresev.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Habitación", "Cliente", "Fecha", "Hora", "Días", "Costo total"
            }
        ));
        jScrollPane2.setViewportView(Tableresev);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 540, 260));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 580, 370));

        jLabel1.setText("Datos de la Reserva");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel2.setText("Lista de Habitaciones Reservadas");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Consumos lProducts = new Consumos();
        lProducts.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void ButtonConshabiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConshabiActionPerformed
        Lista_habitaciones lHabitacion = new Lista_habitaciones(this);
        lHabitacion.setVisible(true);
    }//GEN-LAST:event_ButtonConshabiActionPerformed

    private void ButtonConscliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConscliActionPerformed
        Lista_Clientes lClient = new Lista_Clientes(this);
        lClient.setVisible(true);
    }//GEN-LAST:event_ButtonConscliActionPerformed

    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
        String dato = txtBuscar.getText().toString(); // Se declara una variable para el dato que se capture en el campo de texto 
        String num = dato.length()+""; // Se declara una cariable que cuenta los caracteres que tiene el dato 
        loadTablerese(dato,num); // Se pasan estas dos cariables al metodo
    }//GEN-LAST:event_txtBuscarKeyTyped

    private void ButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBorrarActionPerformed
        // Se llama al metodo para vaciar los campos de texto
        clearTextField();

        // Se llama al metodo para bloquear los campos de texto
        lockTextEdit();
    }//GEN-LAST:event_ButtonBorrarActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Se llama al metodo para vaciar los campos de texto
        clearTextField();

        // Se llama al metodo para bloquear los campos de texto
        lockTextEdit();

        // Se ocultan los botones de aceptar y cancelar
        btnCancel.setVisible(false);
        btnAccept.setVisible(false);

        // Se muestran los demas botones de accion
        ButtonBorrar.setVisible(true);
        ButtonNuevo.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed

        // Se analiza si existe algun campo vacio en los campos de texto
        if(txtHabitacion.getText().equals("") || txtCliente.getText().equals("") || txtFecha.getText().equals("") || txtHora.getText().equals("") || txtcantdias.getText().equals("") || txtCosto.getText().equals("") || ComboboxEstado.getSelectedItem().equals("-------"))
        {
            JOptionPane.showMessageDialog(null, "Existe algun campo vacio, favor de llenarlo o cambiar el valor del desplegable", "CAMPOS VACIOS", JOptionPane.WARNING_MESSAGE);
        }
        // Sin embargo, si no existen campos vacios
        else
        {
            
            // Se hace una concatenacion entre las iniciales y la fecha
            String habit = txtHabitacion.getText();
            String[] habits = habit.split(",");

            String client = txtCliente.getText();
            String fecha = txtFecha.getText();
            String hora = txtHora.getText();
            int dias = Integer.parseInt(txtcantdias.getText());
            
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        ResultSetMetaData rsmd;         // Variable que se encarga de almacenar la informacion de la tabla
        int total = 0;
                
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion
            
           
            ps = cn.prepareStatement("CALL `costhabit`(?)"); //Se prepara la linea de codigo para ejecutar el PROCEDURE
            ps.setString(1, habit);                                  //Valor de entrada del Segundo dato
            

            rs = ps.executeQuery();                     // Se ejecuta la consulta
            rsmd = rs.getMetaData();                    // Se consigue la informacion de la 
            int habpres = Integer.getInteger(rsmd.toString());
            
             total = habpres*dias; 
             
             
             cx.disconnect();    // Se cierra la conexion con la base de datos
        }
        catch (SQLException ex) 
        {
            System.out.println("Error = " + ex);     // Se notifica via consola que ha ocurrido un error
        }
            String val;
            val = total+"";
             txtCosto.setText(val);
             
             String costo = txtCosto.getText();
            // Se ejecuta el metodo para añadir los valores a la tabla de productos
            ADDreserva(habits, client, fecha, hora, dias, costo);
            
            Pagar ventana = new Pagar(habits, client, costo);
            

            // Se llama al metodo para bloquear los campos de texto
            lockTextEdit();

            // Se ocultan los botones de aceptar y cancelar
            btnCancel.setVisible(false);
            btnAccept.setVisible(false);

            // Se muestran los demas botones de accion
            ButtonBorrar.setVisible(true);
            ButtonNuevo.setVisible(true);
        }

    }//GEN-LAST:event_btnAcceptActionPerformed

    private void ButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNuevoActionPerformed
        // Se llama al metodo para vaciar los campos de texto
        clearTextField();

        // Se llama al metodo para desbloquear los campos de texto
        unlockTextEdit();

        // Se muestran los botones de aceptar y cancelar
        btnCancel.setVisible(true);
        btnAccept.setVisible(true);

        // Se ocultan los demas botones de accion
        ButtonBorrar.setVisible(false);
        ButtonNuevo.setVisible(false);
    }//GEN-LAST:event_ButtonNuevoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBorrar;
    private javax.swing.JButton ButtonBuscar;
    private javax.swing.JButton ButtonConscli;
    private javax.swing.JButton ButtonConshabi;
    private javax.swing.JButton ButtonEliminar;
    private javax.swing.JButton ButtonNuevo;
    private javax.swing.JComboBox<String> ComboboxEstado;
    private javax.swing.JComboBox<String> Comboboxtiporeserva;
    private javax.swing.JTable Tableresev;
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtBuscar;
    public javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCosto;
    private javax.swing.JFormattedTextField txtFecha;
    public javax.swing.JTextField txtHabitacion;
    private javax.swing.JFormattedTextField txtHora;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtcantdias;
    // End of variables declaration//GEN-END:variables

    // Metodo encargado para bloquear los campos de texto
    @Override
    public void lockTextEdit()
    {
        // Se bloquea la edicion de los campos de texto
       txtHabitacion.setEditable(false);
       txtCliente.setEditable(false);
       Comboboxtiporeserva.setEditable(false);
       txtFecha.setEditable(false);
       txtHora.setEditable(false);
       txtcantdias.setEditable(false);
       txtCosto.setEditable(false);
       ComboboxEstado.setEditable(false);
    }
    
    // Metodo encargado para desbloquear los campos de texto
    @Override
    public void unlockTextEdit()
    {
        // Se desbloquea la edicion de los campos de texto
       txtFecha.setEditable(true);
       txtHora.setEditable(true);
       txtcantdias.setEditable(true);
       txtCosto.setEditable(true);
    }
    
    // Metodo encargado para vaciar los campos de texto
    @Override
    public void clearTextField()
    {
        // Se vacian los campos de texto
        txtHabitacion.setText("");
        txtCliente.setText("");
        Comboboxtiporeserva.setSelectedIndex(0);
        txtFecha.setText("");
        txtHora.setText("");
        txtcantdias.setText("");
        txtCosto.setText("");
        ComboboxEstado.setSelectedIndex(0);
    }
    
    // Metodo encargado de añadir los valores en la tabla de recepcionistas
    private void ADDreserva(String[] habits, String client, String fecha, String hora, int dias, String costo)
    {
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta

        try
        {
            Conexion cx = new Conexion();                                   // Se crea una nueva conexion
            Connection cn = cx.connect();                                   // Se ejecuta el metodo connect() de la clase Conexion
            
            ps = cn.prepareStatement("CALL `ADDreserv`(?,?,?,?,?,?)");     // Se prepara la linea de codigo para ejecutar el PROCEDURE
            
            // Se asignan los valores de los parametros a la consulta
            ps.setString(1, client);
            ps.setString(2, Arrays.toString(habits));
            ps.setString(3, fecha);
            ps.setInt(4, Integer.parseInt(hora));
            ps.setString(5, dias+"");
            ps.setInt(6, Integer.parseInt(costo));

            ps.executeUpdate();         // Se ejecuta la actualizacion de los registros
            
            // Se notifica al usuario que se ha registrado el producto
            JOptionPane.showMessageDialog(null, "SE HA REGISTRADO AL NUEVO RECEPCIONISTA");

            cx.disconnect();        // Se cierra la conexion con la base de datos
            loadTable();    // Se actualiza la tabla 
        }
        
        
        catch(Exception e)
        {
            System.out.println("ERROR. - " + e);
        }
    }
    
    private void loadTablerese(String dato, String num)
    {
        DefaultTableModel modeloTabla = (DefaultTableModel) Tableresev.getModel();   // Se crea un nuevo modelo de tabla referenciando a la tabla de la ventana
        modeloTabla.setRowCount(0);                                                     // Se establece la primera fila para comenzar desde esa posicion
        
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        ResultSetMetaData rsmd;         // Variable que se encarga de almacenar la informacion de la tabla
        int columnas;                   // Cantidad de columnas que tiene la tabla
        
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion
            
           
            ps = cn.prepareStatement("CALL `SERCHreservUNIQUE`(?,?)"); //Se prepara la linea de codigo para ejecutar el PROCEDURE
            ps.setString(1, dato);                                  //Valor de entrada del primer dato
            ps.setString(2, num);                                   //Valor de entrada del Segundo dato
            

            rs = ps.executeQuery();                     // Se ejecuta la consulta
            rsmd = rs.getMetaData();                    // Se consigue la informacion de la 
            columnas = rsmd.getColumnCount();           // Se asigna la cantidad de columnas
            
            // Ciclo while donde se comprueba si existe un registro siguiente
            while(rs.next())
            {
                Object[] fila = new Object[columnas];           // Se establece un arreglo en el que se almacenaran los datos
                for(int i = 0; i < columnas; i++)               // Ciclo que termina hasta haber llenado el arreglo anterior
                {
                    fila[i] = rs.getObject(i + 1);              // Se añade el valor de la consulta almacenado en el arreglo
                }
                modeloTabla.addRow(fila);                       // Se añade la fila a la tabla
            }
            cx.disconnect();    // Se cierra la conexion con la base de datos
        }
        catch (SQLException ex) 
        {
            System.out.println("Error = " + ex);     // Se notifica via consola que ha ocurrido un error
        }
        
    }
    
    // Metodo encargado de llenar la tabla de los recepcionistas
    private void loadTable()
    {
        DefaultTableModel modeloTabla = (DefaultTableModel) Tableresev.getModel();   // Se crea un nuevo modelo de tabla referenciando a la tabla de la ventana
        modeloTabla.setRowCount(0);                                                     // Se establece la primera fila para comenzar desde esa posicion
        
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        ResultSetMetaData rsmd;         // Variable que se encarga de almacenar la informacion de la tabla
        int columnas;                   // Cantidad de columnas que tiene la tabla
        
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion
            
            ps = cn.prepareStatement("CALL `SERCHreserv`");         // Se prepara la linea de codigo para ejecutar el PROCEDURE

            rs = ps.executeQuery();                     // Se ejecuta la consulta
            rsmd = rs.getMetaData();                    // Se consigue la informacion de la 
            columnas = rsmd.getColumnCount();           // Se asigna la cantidad de columnas
            
            // Ciclo while donde se comprueba si existe un registro siguiente
            while(rs.next())
            {
                Object[] fila = new Object[columnas];           // Se establece un arreglo en el que se almacenaran los datos
                for(int i = 0; i < columnas; i++)               // Ciclo que termina hasta haber llenado el arreglo anterior
                {
                    fila[i] = rs.getObject(i + 1);              // Se añade el valor de la consulta almacenado en el arreglo
                }
                modeloTabla.addRow(fila);                       // Se añade la fila a la tabla
            }
            cx.disconnect();    // Se cierra la conexion con la base de datos
        }
        catch (SQLException ex) 
        {
            System.out.println("Error = " + ex);     // Se notifica via consola que ha ocurrido un error
        }
    }
    
    private void getTotalPrice(String client)
    {
        PreparedStatement ps;           // Variable que se encarga de almacenar la sentencia de la consulta
        ResultSet rs;                   // Variable que se encarga de almacenar los resultados de la consulta
        ResultSetMetaData rsmd;         // Variable que se encarga de almacenar la informacion de la tabla
        
        try
        {
            Conexion cx = new Conexion();                           // Se crea una nueva conexion
            Connection cn = cx.connect();                           // Se ejecuta el metodo connect() de la clase Conexion

            ps = cn.prepareStatement("CALL `SUMhabit` (?)");
            ps.setString(1, client);
            rs = ps.executeQuery();                     // Se ejecuta la consulta
            rsmd = rs.getMetaData();                    // Se consigue la informacion de la
            txtTotal.setText(rsmd.toString());
        }
        catch(SQLException ex)
        {
            System.out.println("Error: " + ex);
        }
    }
    
    public void setHabitation(String hab)
    {
        if(txtHabitacion.getText().equals(""))
        {
            txtHabitacion.setText(hab);
        }
        else
        {
            String lastHabitation = txtHabitacion.getText();

            txtHabitacion.setText(lastHabitation + "," + hab);
        }
    }
    
    public void setClient(String client)
    {
        txtCliente.setText(client);
        Consumos consumos = new Consumos(client);
        
        getTotalPrice(client);
        
    }

}
